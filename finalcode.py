import re
import json

# Grammar definition
class Grammar:
    def __init__(self, grammar):
        self.grammar = grammar

    def is_valid(self, expression):
        # Tokenize the expression
        tokens = re.findall(r'[0-9]+|[a-z]+|[=+\-]', expression)
        stack = []
        prev_token = None

        for token in tokens:
            # Validate identifiers, numbers, and assignment operator
            if re.match(r'[a-z]+', token):  # Identifier
                if prev_token and prev_token not in [None, "=", "+", "-"]:
                    return False
                prev_token = token

            elif re.match(r'\d+', token):  # Number
                if prev_token and prev_token not in [None, "=", "+", "-"]:
                    return False
                prev_token = token

            elif token == "=":  # Assignment operator
                if prev_token is None or prev_token in ["=", "+", "-"]:
                    return False
                if "=" in stack:  # Only one "=" allowed
                    return False
                stack.append(token)
                prev_token = token

            elif token in ["+", "-"]:  # Operators
                if prev_token is None or prev_token in ["=", "+", "-"]:
                    return False
                prev_token = token

            else:
                return False

        if prev_token in ["=", "+", "-"]:  # Expression can't end with these
            return False

        return "=" in stack  # Valid only if "=" is present

# Compare grammars
class GrammarComparator:
    def __init__(self, hardcoded_grammar, generated_grammar):
        self.hardcoded_grammar = hardcoded_grammar
        self.generated_grammar = generated_grammar

    def compare(self):
        differences = {}
        for key in self.hardcoded_grammar:
            if key not in self.generated_grammar:
                differences[key] = "Missing in generated grammar"
            elif self.hardcoded_grammar[key] != self.generated_grammar[key]:
                differences[key] = {
                    "expected": self.hardcoded_grammar[key],
                    "generated": self.generated_grammar[key]
                }
        return differences

# Generate prompt for grammar
def generate_prompt():
    return "Generate a context-free grammar for assignment operations."

# Simulate fetching a grammar generated by AI
def fetch_generated_grammar():
    return {
        "assign": ["identifier = expr"],
        "expr": ["identifier + identifier", "identifier - identifier", "number"],
        "number": ["digit number", "digit"],
        "digit": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    }

# Save generated grammar
def save_generated_grammar(grammar, filename="generated_grammar.json"):
    with open(filename, "w") as file:
        json.dump(grammar, file, indent=4)

# Load grammar
def load_generated_grammar(filename="generated_grammar.json"):
    with open(filename, "r") as file:
        return json.load(file)

if __name__ == "__main__":
    # Define hardcoded grammar
    hardcoded_grammar = {
        "assign": ["identifier = expr"],
        "expr": ["identifier + identifier", "identifier - identifier", "number"],
        "number": ["digit number", "digit"],
        "digit": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    }

    # Generate the grammar
    print("Generating the grammar")
    prompt = generate_prompt()
    print(f"Prompt: {prompt}")
    generated_grammar = fetch_generated_grammar()

    # Save and reload
    save_generated_grammar(generated_grammar)
    loaded_generated_grammar = load_generated_grammar()

    # Compare the hardcoded and generated grammars
    print("\nMaking the comparison")
    comparator = GrammarComparator(hardcoded_grammar, loaded_generated_grammar)
    differences = comparator.compare()
    if differences:
        print("Differences found:")
        for key, diff in differences.items():
            print(f"{key}: {diff}")
    else:
        print("The grammars are the same.")

    # Validate user input
    user_expression = input("\nPlease, enter an assignment operation: ")
    grammar = Grammar(hardcoded_grammar)

    if grammar.is_valid(user_expression):
        print(f"Valid assignment operation: {user_expression}")
    else:
        print("Invalid assignment operation. Please try again.")
